# 수알못의 첫번째 어프로치: 시뮬레이션...
### f(0) = 4
### f(1) = 9
### f(2) = 25
### f(5) = 1089
###
### f(0) = 칸1    = 점4    - 겹점0
### f(1) = 칸4    = 점16   - 겹점7    (3  * (1  * 2) + (1  ^ 2))
### f(2) = 칸16   = 점36   - 겹점11   (5  * (1  * 2) + (1  ^ 2))
### f(3) = 칸64   = 점144  - 겹점63   (9  * (3  * 2) + (3  ^ 2))
### f(4) = 칸256  = 점576  - 겹점287  (17 * (7  * 2) + (7  ^ 2))
### f(5) = 칸1024 = 점2304 - 겹점1215 (33 * (15 * 2) + (15 ^ 2))
###
### f(N) = 점의 개수 - 겹점의 개수
###   칸 = 4 ** N
###   점 = (4 ** (N - 1)) * 9       # 한 칸을 나누면 총 9개의 점이 생기기에 f(N-1)일 때의 칸 수에 9를 곱함
### 겹점 = c * (x * 2) + (x ^ 2)
###        여기서 c = 한 줄에 걸치는 점의 개수
###        여기서 x = f(N-1)에서 꼭지점을 제외한 한 줄에 걸치는 점의 개수 = f(N-1)의 c - 2
#
# 브론즈 문제가 이렇게 복잡할까...? 싶어서 다시 생각함...
# 두번째 어프로치: 수학...
### f(0) = 2 ^ 2
### f(1) = 3 ^ 2
### f(2) = 5 ^ 2
### f(3) = 9 ^ 2
### f(4) = 17 ^ 2
### f(5) = 33 ^ 2
### f(N) = d  ^ 2
# 임을 발견. 여기서 x에 들어갈 식은? 처음엔
###    d = ((2 ^ N) + N - (N - 1))
# 로 도출해냄. 여기서 N - (N - 1)을 간략화하면
### N - (N - 1) = 1N + -1N + (-1 * -1) = 0 + 1 = 1
# 따라서
###    d = ((2 ^ N) + 1)
### f(N) = ((2 ^ N) + 1) ^ 2
# 즉 d = c 이더라...
#
# 나 수학 정말 약하구나...

N = int(input())
print(((2 ** N) + 1) ** 2)
